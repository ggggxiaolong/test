buildscript {
  apply from: "dependencies/versions.gradle"

  addRepos(repositories)
  dependencies {
    classpath deps.plugin.androidGradle
    classpath deps.plugin.kotlin
    classpath deps.plugin.kotlinSerialization
    //    classpath deps.grgit
    classpath 'com.google.gms:google-services:4.0.1'
    classpath deps.plugin.gradleBinary
    classpath deps.plugin.androidMaven
  }
}

allprojects {
  //  def git = Grgit.open(currentDir: projectDir)
  addGitVersion(gitVersionTag(), gitVersionCode())
  addRepos(repositories)
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
  }
}

subprojects {
  def isModule = false
  def isAppModule = isModule || it.name.equals("app")
  def dataBindingModules = ["app"]
  //使用dataBinding的模块
  def enableDataBinding = dataBindingModules.contains(it.name)

  //  apply plugin: 'cipher.so'
  apply plugin: isAppModule ? 'com.android.application' : 'com.android.library'

  apply plugin: 'kotlin-android'
  apply plugin: 'kotlin-kapt'
  apply plugin: 'kotlin-android-extensions'

  android {
    compileSdkVersion build_versions.compile_sdk
    defaultConfig {
      if (isAppModule) applicationId "com.mrtan.test" //这里改成项目id
      minSdkVersion build_versions.min_sdk
      targetSdkVersion build_versions.target_sdk

      versionCode build_versions.androidVersionCode
      versionName build_versions.androidVersionName
      testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
      multiDexEnabled true
      vectorDrawables.useSupportLibrary = true //drawable支持
      ndk {
        abiFilters 'armeabi-v7a'
      }
    }

    compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
    }

    if (enableDataBinding) {
      dataBinding {
        enabled true
      }
    }
  }

  dependencies {
    implementation deps.kotlin.stdlib.jdk
  }
}

def gitVersionCode() {
  def out = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-list', 'HEAD', '--count'
    standardOutput = out
  }
  return out.toString().toInteger()
}

def gitVersionTag() {
  def out = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'describe', '--tags'
    standardOutput = out
  }
  return out.toString().trim()
}
task clean(type: Delete) {
  delete rootProject.buildDir
}